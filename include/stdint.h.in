/* stdint.h -- This file is part of OS/0 libc.
   Copyright (C) 2021 XNSC

   OS/0 libc is free software: you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   OS/0 libc is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public License
   along with OS/0 libc. If not, see <https://www.gnu.org/licenses/>. */

#ifndef _STDINT_H
#define _STDINT_H

/* Fixed-width integer types */

typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef @__INT64_T@ int64_t;

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef @__UINT64_T@ uint64_t;

/* Minimum-width integer types */

typedef int8_t int_least8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;

typedef uint8_t uint_least8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;

/* Fast integer types */

typedef int8_t int_fast8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;

typedef uint8_t uint_fast8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;

/* Pointer integer types */

typedef @__INTPTR_T@ intptr_t;
typedef @__UINTPTR_T@ uintptr_t;

/* Maximum width integer types */

typedef int64_t intmax_t;
typedef uint64_t uintmax_t;

/* Integer constant macros */

#define INT8_C(x)  (x)
#define INT16_C(x) (x)
#define INT32_C(x) (x)
#define INT64_C(x) (x@__INT64_SUFFIX@)

#define UINT8_C(x)  (x)
#define UINT16_C(x) (x)
#define UINT32_C(x) (x)
#define UINT64_C(x) (x@__UINT64_SUFFIX@)

#define INTMAX_C(x)  INT64_C (x)
#define UINTMAX_C(x) UINT64_C (x)

/* Fixed-width integer limit macros */

#define INT8_MAX  127
#define INT16_MAX 32767
#define INT32_MAX ((int32_t) 2147483647L)
#define INT64_MAX ((int64_t) 9223372036854775807LL)

#define INT8_MIN  -128
#define INT16_MIN -32768
#define INT32_MIN (-INT32_MAX - 1)
#define INT64_MIN (-INT64_MAX - 1)

#define UINT8_MAX  255
#define UINT16_MAX 65535
#define UINT32_MAX ((uint32_t) 4294967295UL)
#define UINT64_MAX ((uint64_t) 18446744073709551615ULL)

/* Minimum-width integer limit macros */

#define INT_LEAST8_MIN  INT8_MIN
#define INT_LEAST16_MIN INT16_MIN
#define INT_LEAST32_MIN INT32_MIN
#define INT_LEAST64_MIN INT64_MIN

#define INT_LEAST8_MAX  INT8_MAX
#define INT_LEAST16_MAX INT16_MAX
#define INT_LEAST32_MAX INT32_MAX
#define INT_LEAST64_MAX INT64_MAX

#define UINT_LEAST8_MAX  UINT8_MAX
#define UINT_LEAST16_MAX UINT16_MAX
#define UINT_LEAST32_MAX UINT32_MAX
#define UINT_LEAST64_MAX UINT64_MAX

/* Fast integer limit macros */

#define INT_FAST8_MIN  INT8_MIN
#define INT_FAST16_MIN INT16_MIN
#define INT_FAST32_MIN INT32_MIN
#define INT_FAST64_MIN INT64_MIN

#define INT_FAST8_MAX  INT8_MAX
#define INT_FAST16_MAX INT16_MAX
#define INT_FAST32_MAX INT32_MAX
#define INT_FAST64_MAX INT64_MAX

#define UINT_FAST8_MAX  UINT8_MAX
#define UINT_FAST16_MAX UINT16_MAX
#define UINT_FAST32_MAX UINT32_MAX
#define UINT_FAST64_MAX UINT64_MAX

/* Pointer integer limits */

#ifdef _LP64
#define INTPTR_MAX  INT64_MAX
#define UINTPTR_MAX UINT64_MAX
#define PTRDIFF_MIN INT64_MIN
#define PTRDIFF_MAX INT64_MAX
#else
#define INTPTR_MAX  INT32_MAX
#define UINTPTR_MAX UINT32_MAX
#define PTRDIFF_MIN INT32_MIN
#define PTRDIFF_MAX INT32_MAX
#endif

/* Maximum-width integer limits */

#define INTMAX_MAX  INT64_MAX
#define UINTMAX_MAX UINT64_MAX

/* Miscellaneous integer limits */

#define SIZE_MAX       UINTPTR_MAX
#define WCHAR_MAX      INT32_MAX
#define WCHAR_MIN      (-WCHAR_MAX - 1)
#define WINT_MIN       INT32_MIN
#define WINT_MAX       INT32_MAX
#define SIG_ATOMIC_MIN INT32_MIN
#define SIG_ATOMIC_MAX INT32_MAX

#endif
